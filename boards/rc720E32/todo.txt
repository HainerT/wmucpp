ToDo
====

Hardware
--------
* bridge 1:
* bridge 2:
* bridge 3:

Prio 0
------
* make dma, timer, usart summary with hw-connections
* ESCape32-Ascii: config-protocol
* crsf-command popups: useful texts
* V/ESC: half-duplex protocol, adaption to dma-pattern
* for SBus-out: selectable range: 1-16 or 17-32 (requires crsfch.lua on radio)

Prio 1
------
* GPS: adaption of protocol-parser to dma-pattern
** maybe F9P support: yaw from GPS (moving baseline)

Prio 2
------
* HOTT-Telemetrie
* S.Port
* IBus-Telemetrie

Prio 3
------
* I2C
** interface to e.g. GY-271, BMM150
* disable/enable Schottel-computations via menu -> general CruiseController

Done:
------
* seperate channel-update from crsf-relay
* baudrate switch
* CRSF direct-mode: use ELRSBuddy without TX(RX) <-> RX
** wait for link-stats packages
** if no link stats, switch to direct mode (spontaneous 0x29 info messages and 0x2B parameter)
** start-byte: 0xEA
** dest: 0xEA (handset)
** src: 0xEE (TX-module)
* SBus, IBus, Hott-Input (together with CRSF-config)
* channel-update: periodic instead of crsf-triggered, because CRSF isn't the one-and-only input anymore
* make tunneling crsf packets valid extended packets (modify also LUA)
* useful LED blink patterns
* CRSF chunking of parameter-settings-entry due to huge setting lists
* CPPM-Input (8/9 channels) and channel-overlay-input (blauzahn: 10Âµs gap; 20ms period)
** requires: channel-input mapper (sources: crsf, cppm, sbus/ibus, ...)
