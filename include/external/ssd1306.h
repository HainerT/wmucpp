#pragma once

#include "appl/fonts.h"
#include "container/pgmarray.h"

template<typename TWIMaster, const TWI::Address& Address>
class SSD1306 {
    inline static constexpr std::byte DispOff = 0xAE_B;
    inline static constexpr std::byte DispOn = 0xAF_B;
    
    inline static constexpr std::byte White = 0x01_B;
    inline static constexpr std::byte Black = 0x00_B;
    
    inline static constexpr uint16_t Width  = 128;
    inline static constexpr uint16_t Height = 64;
    inline static constexpr uint16_t Size = Width * Height / 8;
    
    using font = Font<6,8>;
    
    using master_sync = typename TWIMaster::master_type;
    
public:
    inline static bool init() {
        return TWIMaster::template startWrite<Address>(init_sequence, 0x00_B);        
    }
    inline static void put(char c) {
        TWIMaster::template startWrite<Address>(font()[c], 0x40_B);
    }
    inline static void put(PgmStringView string) {
        char c{'\0'};
        for(uint8_t i = 0; (c = string[i]) != '\0'; ++i) {
            put(c);
        };   
    }
    inline static bool home() {
        auto cs = std::make_array(0xb0_B, 0x21_B, 0x00_B, 0x7f_B);
        return TWIMaster::template startWrite<Address>(cs, 0x00_B);        
    }
    
    inline static void gotoxy(uint8_t x, uint8_t y) {
        x = x * 6;					// one char: 6 pixel width
        auto cs = std::make_array<std::byte>(std::byte(0xb0+y), 0x21_B, std::byte{x}, 0x7f_B);
        master_sync::template write<Address>(cs, 0x00_B);        
    }
    
    inline static void image() {
        gotoxy(0, 0);
//        master_sync::template write<Address>(image1, 0x40_B);
    }
private:
    struct InitGenerator {
        inline static constexpr auto data = std::make_array<std::byte>(	// Initialization Sequence
                                                                        0xAE_B,			// Display OFF (sleep mode)
                                                                        0x20_B, 0x00_B,		// Set Memory Addressing Mode
                                                                        // 00=Horizontal Addressing Mode; 01=Vertical Addressing Mode;
                                                                        // 10=Page Addressing Mode (RESET); 11=Invalid
                                                                        0xB0_B,			// Set Page Start Address for Page Addressing Mode, 0-7
                                                                        0xC8_B,			// Set COM Output Scan Direction
                                                                        0x00_B,			// --set low column address
                                                                        0x10_B,			// --set high column address
                                                                        0x40_B,			// --set start line address
                                                                        0x81_B, 0xCF_B,		// Set contrast control register
                                                                        0xA1_B,			// Set Segment Re-map. A0=address mapped; A1=address 127 mapped.
                                                                        0xA6_B,			// Set display mode. A6=Normal; A7=Inverse
                                                                        0xA8_B, 0x3F_B,		// Set multiplex ratio(1 to 64)
                                                                        0xA4_B,			// Output RAM to Display
                                                                        // 0xA4=Output follows RAM content; 0xA5,Output ignores RAM content
                                                                        0xD3_B, 0x00_B,		// Set display offset. 00 = no offset
                                                                        0xD5_B,			// --set display clock divide ratio/oscillator frequency
                                                                        0xF0_B,			// --set divide ratio
                                                                        0xD9_B, 0x22_B,		// Set pre-charge period
                                                                        0xDA_B, 0x12_B,		// Set com pins hardware configuration
                                                                        0xDB_B,			// --set vcomh
                                                                        0x20_B,			// 0x20,0.77xVcc
                                                                        0x8D_B, 0x14_B,		// Set DC-DC enable
                                                                        0xAF_B
                                                                        );
        constexpr auto operator()() {
            return data;
        }
    };
    inline static constexpr typename Util::Pgm::Converter<InitGenerator>::pgm_type init_sequence{}; 


//    struct ImageGenerator {
//        inline static constexpr auto data = std::make_array<uint8_t>(
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,
//                    0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
//                    0xaa,0xaa,0xaa,0x01,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x01,0x00,0x00,0x40,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x01,0x00,0xc0,0x06,0x00,0x00,0x80,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x20,0x08,0x00,0x00,0x40,0x55,0x55,
//                    0x55,0x55,0x55,0x55,0x55,0x55,0xd5,0x00,0x00,0x10,0x10,0x00,0x00,0x80,0xaa,
//                    0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x00,0x10,0x10,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x20,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x10,
//                    0x00,0x00,0x00,0x00,0x00,0xf8,0xf5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
//                    0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x0e,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x20,0x08,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x30,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0xc0,0x06,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x06,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x08,
//                    0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
//                    0x10,0x00,0x00,0x80,0x75,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,
//                    0x00,0x10,0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,
//                    0x00,0x00,0x20,0x00,0x00,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,
//                    0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
//                    0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x20,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x80,0x40,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x21,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x80,0x40,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x80,0x20,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x80,0x20,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x41,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x80,
//                    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0x00,
//                    0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x02,
//                    0x00,0x80,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,
//                    0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
//                    0x00,0x02,0x00,0x80,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
//                    0x00,0x00,0x02,0x00,0x80,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,
//                    0x00,0x00,0x00,0x02,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,
//                    0x00,0x00,0x00,0x00,0x02,0x00,0x80,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
//                    0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x08,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x80,0x20,0x00,0x00,0x04,0x00,0x00,
//                    0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x80,0x40,0x00,0x00,0x3f,0x00,
//                    0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x80,0x20,0x00,0x80,0x40,
//                    0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x80,0x20,0x00,0x40,
//                    0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x41,0x00,
//                    0x40,0x80,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x80,0x20,
//                    0x00,0x40,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x80,
//                    0x21,0x00,0x20,0x00,0x01,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x20,0x00,0x00,
//                    0x00,0x41,0x00,0x40,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x10,0x00,
//                    0x00,0x80,0x20,0x00,0x60,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x08,
//                    0x00,0x00,0x80,0x20,0x00,0x40,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
//                    0x04,0x00,0x00,0x80,0x40,0x00,0x80,0x40,0x00,0x00,0x00,0x00,0x04,0x00,0x00,
//                    0x00,0x02,0x00,0x00,0x00,0x21,0x00,0x00,0x41,0x00,0x00,0x00,0x00,0x10,0x00,
//                    0x00,0x00,0x01,0x00,0x00,0x80,0x20,0x00,0x00,0x36,0x00,0x00,0x00,0x00,0x60,
//                    0x00,0x00,0xc0,0x00,0x00,0x00,0x80,0x41,0x00,0x00,0x08,0x00,0x00,0x00,0x00,
//                    0x80,0x01,0x00,0x30,0x00,0x00,0x00,0x00,0x35,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x0e,0x00,0x0f,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0xf8,0xfb,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                    0x00,0x00,0x00,0x00
//                    );
        
//        inline static constexpr auto data1 = []{
//            std::array<std::byte, 1024> d;
//            for(uint8_t r = 0; r < 8; ++r) {
//                for(uint8_t c = 0; c < 128; ++c) {
//                    for(uint8_t i = 0; i < 8; ++i) {
                        
//                    }
//                }
//            }
//            return d;
//        }();
        
//        constexpr auto operator()() {
////            return std::array<std::byte, 1024>{0xff_B};
//            return data1;
//        }
//    };
//    using t = typename Util::Pgm::Converter<ImageGenerator>::pgm_type;
//    inline static constexpr typename Util::Pgm::Converter<ImageGenerator>::pgm_type image1{}; 
};
