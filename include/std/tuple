/*
 * WMuCpp - Bare Metal C++ 
 * Copyright (C) 2016, 2017 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <cstdint>
#include <cstddef>
#include <utility>
#include <cassert>

#ifndef __GLIBCXX__

namespace std {
    
    template<typename... V> struct tuple {};
    template<typename T, typename... V>
    struct tuple<T, V...> : tuple<V...> { 
        constexpr tuple() : tuple<V...>{}, mData{} {}
        constexpr tuple(T t, V... vs) : tuple<V...>{vs...}, mData{t} {}
        template<uint8_t N>
        const auto& get() const {
            if constexpr(N == 0) {
                return mData;
            }
            else {
                return tuple<V...>::template get<N-1>();
            }
        }
        template<uint8_t N>
        auto& get() {
            if constexpr(N == 0) {
                return mData;
            }
            else {
                return tuple<V...>::template get<N-1>();
            }
        }
        T mData;
    };
    template<uint8_t N, typename T, typename... TT>
    constexpr const auto& get(const std::tuple<T, TT...>& tuple) {
        if constexpr(N == 0) {
            return tuple.mData;
        }    
        else {
            const std::tuple<TT...>& base = tuple;
            return get<N - 1>(base);
        }
    }
    template<uint8_t N, typename T, typename... TT>
    constexpr auto& get(std::tuple<T, TT...>& tuple) {
        if constexpr(N == 0) {
            return tuple.mData;
        }    
        else {
            std::tuple<TT...>& base = tuple;
            return get<N - 1>(base);
        }
    }
    
    template<typename... T>
    tuple(T...) -> tuple<T...>;
    
    template <typename>
    struct tuple_size;     
    template <typename... Types>
    struct tuple_size<tuple<Types...>> : public std::integral_constant<size_t, sizeof...(Types)>{};
    
    template<typename T>
    class tuple_size<const T> : public std::integral_constant<size_t, tuple_size<T>::value> {};
       
    template<typename T>
    inline constexpr size_t tuple_size_v = tuple_size<T>::value;
    
    namespace detail {
        template <typename Tuple1, size_t... Indices1, typename Tuple2, size_t... Indices2>
        constexpr auto tuple_cat(const Tuple1& tup1, const Tuple2& tup2,
                                  index_sequence<Indices1...>, index_sequence<Indices2...>) {
            return tuple(get<Indices1>(tup1)..., get<Indices2>(tup2)...);
        }
    }
    
    template <typename Tuple1, typename Tuple2>
    constexpr auto tuple_cat(const Tuple1& tup1, const Tuple2& tup2) {
        return detail::tuple_cat(tup1, tup2, make_index_sequence<tuple_size<Tuple1>::value>{}, make_index_sequence<tuple_size<Tuple2>::value>{});
    }
} // !std

#endif

