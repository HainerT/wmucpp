#pragma once

namespace std {
    template<typename T = void>
    struct greater {
        constexpr bool operator()(const T& lhs, const T& rhs) const {
            return lhs > rhs;
        }        
    };
    template<>
    struct greater<void> {
        template<typename T, typename U>
        constexpr bool operator()(const T& lhs, const U& rhs) const {
            return lhs > rhs;
        }        
    };
    template<typename T = void>
    struct less {
        constexpr bool operator()(const T& lhs, const T& rhs) const {
            return lhs < rhs;
        }        
    };
    template<>
    struct less<void> {
        template<typename T, typename U>
        constexpr bool operator()(const T& lhs, const U& rhs) const {
            return lhs < rhs;
        }        
    };
    template<typename T = void>
    struct equal_to {
        constexpr bool operator()(const T& lhs, const T& rhs) const {
            return lhs == rhs;
        }        
    };
    template<>
    struct equal_to<void> {
        template<typename T, typename U>
        constexpr bool operator()(const T& lhs, const U& rhs) const {
            return lhs == rhs;
        }        
    };
    template<typename T = void>
    struct not_equal_to {
        constexpr bool operator()(const T& lhs, const T& rhs) const {
            return lhs != rhs;
        }        
    };
    template<>
    struct not_equal_to<void> {
        template<typename T, typename U>
        constexpr bool operator()(const T& lhs, const U& rhs) const {
            return lhs != rhs;
        }        
    };
}
