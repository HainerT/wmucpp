#pragma once

#include "cstdint"
#include "cstddef"
#include "type_traits"
#include "utility"

namespace std {
    
    template<typename... V> struct tuple {};
    template<typename T, typename... V>
    struct tuple<T, V...> : tuple<V...> { 
        inline constexpr tuple() : tuple<V...>{}, mData{} {}
        inline constexpr tuple(T t, V... vs) : tuple<V...>{vs...}, mData{t} {}
        
//        inline bool constexpr operator==(const tuple& o) const {
//            return [&]<auto... II>(std::index_sequence<II...>){
//                return ((get<II>() == o.template get<II>()) && ...);
//            }(std::make_index_sequence<sizeof...(V)+1>{});
//        }
        
        template<uint8_t N>
        inline constexpr const auto& get() const {
            if constexpr(N == 0) {
                return mData;
            }
            else {
                return tuple<V...>::template get<N-1>();
            }
        }
        template<uint8_t N>
        inline constexpr auto& get() {
            if constexpr(N == 0) {
                return mData;
            }
            else {
                return tuple<V...>::template get<N-1>();
            }
        }
        template<typename U>
        inline constexpr auto& get() {
            if constexpr(std::is_same_v<T, U>) {
                return mData;
            }
            else {
                return tuple<V...>::template get<U>();
            }
        }
        template<typename U>
        inline constexpr const auto& get() const {
            if constexpr(std::is_same_v<T, U>) {
                return mData;
            }
            else {
                return tuple<V...>::template get<U>();
            }
        }
        T mData;
    };

    template<typename... TT>
    bool constexpr operator==(const tuple<TT...>& l, const tuple<TT...>& r) {
        return [&]<auto... II>(std::index_sequence<II...>){
            return ((l.template get<II>() == r.template get<II>()) && ...);
        }(std::make_index_sequence<sizeof...(TT)>{});  
     }

    template<uint8_t N, typename T, typename... TT>
    constexpr const auto& get(const std::tuple<T, TT...>& tuple) {
        if constexpr(N == 0) {
            return tuple.mData;
        }    
        else {
            const std::tuple<TT...>& base = tuple;
            return get<N - 1>(base);
        }
    }
    template<uint8_t N, typename T, typename... TT>
    constexpr auto& get(std::tuple<T, TT...>& tuple) {
        if constexpr(N == 0) {
            return tuple.mData;
        }    
        else {
            std::tuple<TT...>& base = tuple;
            return get<N - 1>(base);
        }
    }

    template<typename U, typename... TT>
    constexpr auto& get(std::tuple<TT...>& tuple) {
        return tuple.template get<U>();
    }
    template<typename U, typename... TT>
    constexpr auto& get(const std::tuple<TT...>& tuple) {
        return tuple.template get<U>();
    }

    
    template<typename... T>
    tuple(T...) -> tuple<T...>;
    
    template <typename>
    struct tuple_size;     
    template <typename... Types>
    struct tuple_size<tuple<Types...>> : public std::integral_constant<size_t, sizeof...(Types)>{};
    
    template<typename T>
    class tuple_size<const T> : public std::integral_constant<size_t, tuple_size<T>::value> {};
       
    template<typename T>
    inline constexpr size_t tuple_size_v = tuple_size<T>::value;
    
    namespace detail {
        template <typename Tuple1, size_t... Indices1, typename Tuple2, size_t... Indices2>
        constexpr auto tuple_cat(const Tuple1& tup1, const Tuple2& tup2,
                                  index_sequence<Indices1...>, index_sequence<Indices2...>) {
            return tuple(get<Indices1>(tup1)..., get<Indices2>(tup2)...);
        }
    }
    
    template <typename Tuple1, typename Tuple2>
    constexpr auto tuple_cat(const Tuple1& tup1, const Tuple2& tup2) {
        return detail::tuple_cat(tup1, tup2, make_index_sequence<tuple_size<Tuple1>::value>{}, make_index_sequence<tuple_size<Tuple2>::value>{});
    }
} // !std
